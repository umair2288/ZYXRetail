FROM node:alpine as build
WORKDIR /app
COPY frontend/package.json /app/package.json
COPY frontend/yarn.lock /app/yarn.lock
ENV PATH /app/node_modules/.bin:$PATH
COPY frontend/ /app 
RUN yarn
RUN yarn build



FROM python:3.7-buster
RUN apt-get update && apt-get install nginx vim -y --no-install-recommends
COPY nginx.default /etc/nginx/sites-available/default
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log

# copy source and install dependencies
RUN mkdir -p /opt/app
RUN mkdir -p /opt/app/build
RUN mkdir -p /opt/app/pip_cache
RUN mkdir -p /opt/app/backend
#copy react build 
COPY --from=build /app/build /opt/app/build

COPY backend/requirements.txt  /opt/app/
COPY backend/.pip_cache /opt/app/pip_cache/
# COPY ApplicationBackend /opt/app/application_backend/ -- we are using volumes instead
WORKDIR /opt/app
RUN pip install -r requirements.txt --cache-dir /opt/app/pip_cache
COPY  start-server.sh /opt/app/
RUN chown -R www-data:www-data /opt/app

# start server
EXPOSE 80
STOPSIGNAL SIGTERM
CMD ["/opt/app/start-server.sh"]